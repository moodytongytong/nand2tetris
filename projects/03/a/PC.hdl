// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    Register(in=outT, load=true, out=feedback, out=out);
    Inc16(in=feedback, out=incOut);
    Mux8Way16(a=false, b=incOut, c=in, d=in, e=false, f=false, g=false, h=false, sel[0]=inc, sel[1]=load, sel[2]=reset, out=outT);
}

// This one is very tricky.  I started by implementing with multiple Mux16, assumed that only one of inc, load, and reset would be turned on
// However,  I realized that the selectors could be on simultaneously, which means that I'll need to find our each selector's precedence
// After figuring out each selector's precednece from the .cmp, I tried to reflect the precedence by ordering the multiple Mux16 I was using
// That failed as well, so I eventually decided to use the approach you see above.
// Realize that the load in Register is always turned to "true"
// I hope this helps!
